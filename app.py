from flask import Flask, render_template, request # type: ignore
from openai import OpenAI # type: ignore
from dotenv import load_dotenv # type: ignore
import os
import chromadb # type: ignore
import chromadb.utils.embedding_functions as embedding_functions # type: ignore

app = Flask(__name__)

load_dotenv()

openai_client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

system_description = (
    "The system under consideration is a cloud-based e-commerce platform that allows users to create accounts, browse products, and complete transactions. It consists of a web application front-end built with React, a microservices-based back-end deployed in Docker containers on AWS, and a PostgreSQL database for storing user data, product details, and transaction records. The system integrates with third-party payment processors (e.g., Stripe) via REST APIs and uses AWS Cognito for user authentication and authorization, supporting multi-factor authentication (MFA). Sensitive data, including user passwords and payment information, is encrypted both in transit (TLS) and at rest. The platform includes an admin interface for product management and order fulfillment, with role-based access controls (RBAC) in place. Real-time notifications and updates are handled via WebSockets, and the system is designed for horizontal scalability and high availability, utilizing AWS services like S3, CloudFront, and RDS. Logging and monitoring are enabled through AWS CloudWatch and centralized logging systems for auditing and anomaly detection."
)

system_description2 = (
    "The software is a cloud-based project management tool designed to streamline team collaboration, task tracking, and workflow automation. It enables users to create, assign, and manage tasks through an intuitive interface, offering real-time updates and progress tracking. Key features include customizable dashboards, time tracking, document sharing, and integrations with popular third-party applications such as Google Drive and Slack. The system supports multiple user roles with access controls, ensuring secure data management. It is accessible via web and mobile platforms, providing flexibility for remote and on-site teams."
)

def decompose_system(system_description):
    system_decomposition_prompt = (
        "I'll give you a textual description of a system. "
        "Decompose this system using data flow diagram (DFD) elements for threat modeling. "
        "Stucture your response as follows: external entities, processes, data stores, and data flows. "
        "Respond in plaintext instead of Markdown. "
        "The system description is as follows:\n" + system_description
    )
    print("--------------------------------------------------------")
    print(f"System Decomposition Prompt:\n{system_decomposition_prompt}")
    system_decomposition = openai_client.chat.completions.create(
        model="gpt-4o",
        messages=[
            {"role": "user", "content": system_decomposition_prompt}
        ]
    )
    decomposed_system = system_decomposition.choices[0].message.content
    print("--------------------------------------------------------")
    print(f"Decomposed System from LLM:\n{decomposed_system}")
    return decomposed_system

decompose_system_output = ("""
External Entities:
- Users (Team Members, Project Managers)
- Third-party Applications (Google Drive, Slack)
- Web and Mobile Platforms

Processes:
- Task Management (Create, Assign, Manage Tasks)
- Real-time Updates and Progress Tracking
- Dashboard Customization
- Time Tracking
- Document Sharing
- Access Control Management
- Integration with Third-party Applications

Data Stores:
- Task Data (Task details, assignments, progress)
- User Data (User roles, access permissions)
- Dashboard Configuration Data
- Time Tracking Data
- Document Repository
- Integration Data (Data exchanged with third-party apps)

Data Flows:
- User actions to Task Management process (Creating, Assigning, Updating Tasks)
- Task updates to User interfaces for Real-time Updates and Progress Tracking
- User inputs to Dashboard Customization process
- Time tracking entries to Time Tracking process and data store
- Documents uploaded/downloaded to/from Document Repository
- Access control decisions communicated to different processes
- Data exchanges between system and Third-party Applications
- User interfaces accessed via Web and Mobile Platforms to interact with various system processes and data stores
""")

decompose_system_output2 = ("""
<h1>External Entities</h1>
    <ul>
        <li>Users (Team Members, Project Managers)</li>
        <li>Third-party Applications (Google Drive, Slack)</li>
        <li>Web and Mobile Platforms</li>
    </ul>

    <h1>Processes</h1>
    <ul>
        <li>Task Management (Create, Assign, Manage Tasks)</li>
        <li>Real-time Updates and Progress Tracking</li>
        <li>Dashboard Customization</li>
        <li>Time Tracking</li>
        <li>Document Sharing</li>
        <li>Access Control Management</li>
        <li>Integration with Third-party Applications</li>
    </ul>

    <h1>Data Stores</h1>
    <ul>
        <li>Task Data (Task details, assignments, progress)</li>
        <li>User Data (User roles, access permissions)</li>
        <li>Dashboard Configuration Data</li>
        <li>Time Tracking Data</li>
        <li>Document Repository</li>
        <li>Integration Data (Data exchanged with third-party apps)</li>
    </ul>

    <h1>Data Flows</h1>
    <ul>
        <li>User actions to Task Management process (Creating, Assigning, Updating Tasks)</li>
        <li>Task updates to User interfaces for Real-time Updates and Progress Tracking</li>
        <li>User inputs to Dashboard Customization process</li>
        <li>Time tracking entries to Time Tracking process and data store</li>
        <li>Documents uploaded/downloaded to/from Document Repository</li>
        <li>Access control decisions communicated to different processes</li>
        <li>Data exchanges between system and Third-party Applications</li>
        <li>User interfaces accessed via Web and Mobile Platforms to interact with various system processes and data stores</li>
    </ul>

""")

def identify_threats(decomposed_system):
    threat_identification_prompt = (
        "I'll give you a decomposed system. "
        "Identify relevant attack patterns for each system component (external entities, processes, data stores, and data flows). "
        "Maintain the structure of the input in your output. "
        "Respond in plaintext instead of Markdown. "
        "The decomposed system is as follows:\n" + decomposed_system
    )
    print("--------------------------------------------------------")
    print(f"Threat Identification Prompt:\n{threat_identification_prompt}")
    threat_identification = openai_client.chat.completions.create(
        model="gpt-4o",
        messages=[
            {"role": "user", "content": threat_identification_prompt}
        ]
    )
    identified_threats = threat_identification.choices[0].message.content
    print("--------------------------------------------------------")
    print(f"Threats Identified by LLM:\n{identified_threats}")
    return identified_threats

identify_threats_output = ("""
External Entities:
- Users (Team Members, Project Managers): Social engineering, phishing attacks, privilege escalation.
- Third-party Applications (Google Drive, Slack): API exploitation, supply chain attacks, unauthorized data access.
- Web and Mobile Platforms: Cross-site scripting (XSS), cross-site request forgery (CSRF), session hijacking.

Processes:
- Task Management (Create, Assign, Manage Tasks): Input validation vulnerabilities, business logic flaws.
- Real-time Updates and Progress Tracking: Race conditions, information disclosure through unsecured channels.
- Dashboard Customization: Misconfiguration vulnerabilities, injection attacks.
- Time Tracking: Data tampering, unauthorized time entry manipulation.
- Document Sharing: Data leakage, insufficient access controls.
- Access Control Management: Broken access control, improper session management.
- Integration with Third-party Applications: API abuse, data leakage through improper integration.

Data Stores:
- Task Data (Task details, assignments, progress): Unauthorized access, data integrity attacks.
- User Data (User roles, access permissions): Identity theft, privilege escalation, data breaches.
- Dashboard Configuration Data: Misconfiguration, unauthorized modifications.
- Time Tracking Data: Data tampering, unauthorized access.
- Document Repository: Unauthorized access, data breaches.
- Integration Data (Data exchanged with third-party apps): Data interception, man-in-the-middle attacks.

Data Flows:
- User actions to Task Management process (Creating, Assigning, Updating Tasks): Injection attacks, improper input validation.
- Task updates to User interfaces for Real-time Updates and Progress Tracking: Insecure data transmission, data leakage.
- User inputs to Dashboard Customization process: Injection attacks, cross-site scripting (XSS).
- Time tracking entries to Time Tracking process and data store: Data tampering, unauthorized data manipulation.
- Documents uploaded/downloaded to/from Document Repository: Insufficient encryption, data exfiltration.
- Access control decisions communicated to different processes: Broken access control, unauthorized access.
- Data exchanges between system and Third-party Applications: API exploitation, data interception.
- User interfaces accessed via Web and Mobile Platforms to interact with various system processes and data stores: Cross-site scripting (XSS), session hijacking, man-in-the-middle attacks.
""")

def generate_dictionary(identified_threats):
    dictionary_generation_prompt = (
        "I'll give you a listing of system components and related threats that are organized around data-flow diagram (DFD) elements. "
        "Return a Python dictionary where each DFD element points to another dictionary of system components where each system component points to a list of threats. "
        "Just provide the code that will be parsed to a Python object. "
        "Respond in plaintext instead of Markdown. "
        "The threat listing is as follows:\n" + identified_threats
    )
    print("--------------------------------------------------------")
    print(f"Dictionary Generation Prompt:\n{dictionary_generation_prompt}")
    dictionary_generation = openai_client.chat.completions.create(
        model="gpt-4o",
        messages=[
            {"role": "user", "content": dictionary_generation_prompt}
        ]
    )
    generated_dictionary = dictionary_generation.choices[0].message.content
    print("--------------------------------------------------------")
    print(f"Generated Dictionary by LLM:\n{generated_dictionary}")
    threat_dictionary = {}
    try:
        threat_dictionary = eval(generated_dictionary)
    except Exception as e:
        print(f"There was an error evaluating the LLM-generated string as Python code: {e}")
    return threat_dictionary

generate_dictionary_output = {
    "External Entities": {
        "Users (Team Members, Project Managers)": [
            "Social engineering", 
            "phishing attacks", 
            "privilege escalation"
        ],
        "Third-party Applications (Google Drive, Slack)": [
            "API exploitation", 
            "supply chain attacks", 
            "unauthorized data access"
        ],
        "Web and Mobile Platforms": [
            "Cross-site scripting (XSS)", 
            "cross-site request forgery (CSRF)", 
            "session hijacking"
        ]
    },
    "Processes": {
        "Task Management (Create, Assign, Manage Tasks)": [
            "Input validation vulnerabilities", 
            "business logic flaws"
        ],
        "Real-time Updates and Progress Tracking": [
            "Race conditions", 
            "information disclosure through unsecured channels"
        ],
        "Dashboard Customization": [
            "Misconfiguration vulnerabilities", 
            "injection attacks"
        ],
        "Time Tracking": [
            "Data tampering", 
            "unauthorized time entry manipulation"
        ],
        "Document Sharing": [
            "Data leakage", 
            "insufficient access controls"
        ],
        "Access Control Management": [
            "Broken access control", 
            "improper session management"
        ],
        "Integration with Third-party Applications": [
            "API abuse", 
            "data leakage through improper integration"
        ]
    },
    "Data Stores": {
        "Task Data (Task details, assignments, progress)": [
            "Unauthorized access", 
            "data integrity attacks"
        ],
        "User Data (User roles, access permissions)": [
            "Identity theft", 
            "privilege escalation", 
            "data breaches"
        ],
        "Dashboard Configuration Data": [
            "Misconfiguration", 
            "unauthorized modifications"
        ],
        "Time Tracking Data": [
            "Data tampering", 
            "unauthorized access"
        ],
        "Document Repository": [
            "Unauthorized access", 
            "data breaches"
        ],
        "Integration Data (Data exchanged with third-party apps)": [
            "Data interception", 
            "man-in-the-middle attacks"
        ]
    },
    "Data Flows": {
        "User actions to Task Management process (Creating, Assigning, Updating Tasks)": [
            "Injection attacks", 
            "improper input validation"
        ],
        "Task updates to User interfaces for Real-time Updates and Progress Tracking": [
            "Insecure data transmission", 
            "data leakage"
        ],
        "User inputs to Dashboard Customization process": [
            "Injection attacks", 
            "cross-site scripting (XSS)"
        ],
        "Time tracking entries to Time Tracking process and data store": [
            "Data tampering", 
            "unauthorized data manipulation"
        ],
        "Documents uploaded/downloaded to/from Document Repository": [
            "Insufficient encryption", 
            "data exfiltration"
        ],
        "Access control decisions communicated to different processes": [
            "Broken access control", 
            "unauthorized access"
        ],
        "Data exchanges between system and Third-party Applications": [
            "API exploitation", 
            "data interception"
        ],
        "User interfaces accessed via Web and Mobile Platforms to interact with various system processes and data stores": [
            "Cross-site scripting (XSS)", 
            "session hijacking", 
            "man-in-the-middle attacks"
        ]
    }
}

def retrieve_entries(threat_dictionary):
    chroma_client = chromadb.PersistentClient(path="chroma")
    openai_ef = embedding_functions.OpenAIEmbeddingFunction(
                api_key=os.getenv("OPENAI_API_KEY"),
                model_name="text-embedding-3-large"
            )
    collection = chroma_client.get_or_create_collection(
    name="capec",
    metadata={"hnsw:space": "cosine"},
    embedding_function=openai_ef
    )
    retrieved_entries = []
    for dfd_element, system_components in threat_dictionary.items():
        element_node = {
            "text": f"<i>{dfd_element}</i>",
            "state": { "opened": True },
            "children": []
        }
        for system_component, threats in system_components.items():
            component_node = {
                "text": f"{system_component}",
                "state": { "opened": True },
                "children": []
            }
            for threat in threats:
                capec_entry = collection.query(query_texts=[f"Threat: {threat} (Associated System Component: {system_component})"], n_results=1)
                capec_dictionary = eval(capec_entry["documents"][0][0])
                likelihood_of_attack = capec_dictionary.get("Likelihood Of Attack")
                typical_severity = capec_dictionary.get("Typical Severity")
                threat_node = {
                    "text": f"<mark>{threat}</mark>",
                    "state": { "opened": False },
                    "data": { "likelihood": likelihood_of_attack, "severity": typical_severity },
                    "children": []
                }
                for key, value in capec_dictionary.items():
                    row_node = {
                    "text": f"<b>CAPEC {key}:</b> {value if value else '<i>N/A</i>'}"
                    }
                    threat_node["children"].append(row_node)
                component_node["children"].append(threat_node)
            element_node["children"].append(component_node)
        retrieved_entries.append(element_node)
    print("--------------------------------------------------------")
    print(f"Entries Retrieved by LLM:\n{retrieved_entries}")
    return retrieved_entries

retrieve_entries_output = [
{'text': '<i>External Entities</i>', 'state': {'opened': True}, 'children': [{'text': 'Users (Team Members, Project Managers)', 'state': {'opened': True}, 'children': [{'text': '<mark>"Social engineering"</mark>', 'state': {'opened': False}, 'data': {'likelihood': 'Medium', 'severity': 'Medium'}, 'children': [{'text': '<b>CAPEC ID:</b> 416'}, {'text': '<b>CAPEC Name:</b> Manipulate Human Behavior'}, {'text': "<b>CAPEC Description:</b> An adversary exploits inherent human psychological predisposition to influence a targeted individual or group to solicit information or manipulate the target into performing an action that serves the adversary's interests. Many interpersonal social engineering techniques do not involve outright deception, although they can; many are subtle ways of manipulating a target to remove barriers, make the target feel comfortable, and produce an exchange in which the target is either more likely to share information directly, or let key information slip out unintentionally. A skilled adversary uses these techniques when appropriate to produce the desired outcome. Manipulation techniques vary from the overt, such as pretending to be a supervisor to a help desk, to the subtle, such as making the target feel comfortable with the adversary's speech and thought patterns."}, {'text': '<b>CAPEC Likelihood Of Attack:</b> Medium'}, {'text': '<b>CAPEC Typical Severity:</b> Medium'}, {'text': '<b>CAPEC Mitigations:</b> ::An organization should provide regular, robust cybersecurity training to its employees to prevent successful social engineering attacks.::'}, {'text': '<b>CAPEC Example Instances:</b> <i>N/A</i>'}]}, {'text': '<mark>"phishing attacks"</mark>', 'state': {'opened': False}, 'data': {'likelihood': 'High', 'severity': 'Very High'}, 'children': [{'text': '<b>CAPEC ID:</b> 98'}, {'text': '<b>CAPEC Name:</b> Phishing'}, {'text': '<b>CAPEC Description:</b> Phishing is a social engineering technique where an attacker masquerades as a legitimate entity with which the victim might do business in order to prompt the user to reveal some confidential information (very frequently authentication credentials) that can later be used by an attacker. Phishing is essentially a form of information gathering or fishing for information.'}, {'text': '<b>CAPEC Likelihood Of Attack:</b> High'}, {'text': '<b>CAPEC Typical Severity:</b> Very High'}, {'text': '<b>CAPEC Mitigations:</b> ::Do not follow any links that you receive within your e-mails and certainly do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. A safe practice would also be to type the URL of your bank in the browser directly and only then log in. Also, never reply to any e-mails that ask you to provide sensitive information of any kind.::'}, {'text': "<b>CAPEC Example Instances:</b> ::The target gets an official looking e-mail from their bank stating that their account has been temporarily locked due to suspected unauthorized activity and that they need to click on the link included in the e-mail to log in to their bank account in order to unlock it. The link in the e-mail looks very similar to that of their bank and once the link is clicked, the log in page is the exact replica. The target supplies their login credentials after which they are notified that their account has now been unlocked and that everything is fine. An attacker has just collected the target's online banking information which can now be used by the attacker to log into the target's bank account and transfer money to a bank account of the attackers' choice.::An adversary may use BlueJacking, or Bluetooth Phishing to send unsolicited contact cards, messages, or pictures to nearby devices that are listening via Bluetooth. These messages may contain phishing content.::"}]}, {'text': '<mark>"privilege escalation"</mark>', 'state': {'opened': False}, 'data': {'likelihood': '', 'severity': ''}, 'children': [{'text': '<b>CAPEC ID:</b> 233'}, {'text': '<b>CAPEC Name:</b> Privilege Escalation'}, {'text': '<b>CAPEC Description:</b> An adversary exploits a weakness enabling them to elevate their privilege and perform an action that they are not supposed to be authorized to perform.'}, {'text': '<b>CAPEC Likelihood Of Attack:</b> <i>N/A</i>'}, {'text': '<b>CAPEC Typical Severity:</b> <i>N/A</i>'}, {'text': '<b>CAPEC Mitigations:</b> <i>N/A</i>'}, {'text': '<b>CAPEC Example Instances:</b> <i>N/A</i>'}]}]}, {'text': 'Third-party Applications (Google Drive, Slack)', 'state': {'opened': True}, 'children': [{'text': '<mark>"API exploitation"</mark>', 'state': {'opened': False}, 'data': {'likelihood': 'High', 'severity': 'Medium'}, 'children': [{'text': '<b>CAPEC ID:</b> 510'}, {'text': '<b>CAPEC Name:</b> SaaS User Request Forgery'}, {'text': "<b>CAPEC Description:</b> An adversary, through a previously installed malicious application, performs malicious actions against a third-party Software as a Service (SaaS) application (also known as a cloud based application) by leveraging the persistent and implicit trust placed on a trusted user's session. This attack is executed after a trusted user is authenticated into a cloud service, piggy-backing on the authenticated session, and exploiting the fact that the cloud service believes it is only interacting with the trusted user. If successful, the actions embedded in the malicious application will be processed and accepted by the targeted SaaS application and executed at the trusted user's privilege level."}, {'text': '<b>CAPEC Likelihood Of Attack:</b> High'}, {'text': '<b>CAPEC Typical Severity:</b> Medium'}, {'text': "<b>CAPEC Mitigations:</b> ::To limit one's exposure to this type of attack, tunnel communications through a secure proxy service.::Detection of this type of attack can be done through heuristic analysis of behavioral anomalies (a la credit card fraud detection) which can be used to identify inhuman behavioral patterns. (e.g., spidering)::"}, {'text': '<b>CAPEC Example Instances:</b> <i>N/A</i>'}]}, {'text': '<mark>"supply chain attacks"</mark>', 'state': {'opened': False}, 'data': {'likelihood': 'Medium', 'severity': 'High'}, 'children': [{'text': '<b>CAPEC ID:</b> 446'}, {'text': '<b>CAPEC Name:</b> Malicious Logic Insertion into Product via Inclusion of Third-Party Component'}, {'text': '<b>CAPEC Description:</b> An adversary conducts supply chain attacks by the inclusion of insecure third-party components into a technology, product, or code-base, possibly packaging a malicious driver or component along with the product before shipping it to the consumer or acquirer.'}, {'text': '<b>CAPEC Likelihood Of Attack:</b> Medium'}, {'text': '<b>CAPEC Typical Severity:</b> High'}, {'text': "<b>CAPEC Mitigations:</b> ::Assess software and hardware during development and prior to deployment to ensure that it functions as intended and without any malicious functionality. This includes both initial development, as well as updates propagated to the product after deployment.::Don't assume popular third-party components are free from malware or vulnerabilities. For software, assess for malicious functionality via update/commit reviews or automated static/dynamic analysis prior to including the component within the application and deploying in a production environment.::"}, {'text': "<b>CAPEC Example Instances:</b> ::From mid-2014 to early 2015, Lenovo computers were shipped with the Superfish Visual Search software that ultimately functioned as adware on the system. The Visual Search installation included a self-signed root HTTPS certificate that was able to intercept encrypted traffic for any site visited by the user. Of more concern was the fact that the certificate's corresponding private key was the same for every Lenovo machine. Once the private key was discovered [REF-709], an adversary could then conduct an Adversary-in-the-Middle (AitM) attack that would go undetected by machines that had this certificate installed on it. Adversaries could then masquerade as legitimate entities such as financial institutions, popular corporations, or other secure destinations on the Internet. [REF-708]::In 2018 it was discovered that Chinese spies infiltrated several U.S. government agencies and corporations as far back as 2015 by including a malicious microchip within the motherboard of servers sold by Elemental Technologies to the victims. Although these servers were assembled via a U.S. based company, the motherboards used within the servers were manufactured and maliciously altered via a Chinese subcontractor. Elemental Technologies then sold these malicious servers to various U.S. government agencies, such as the DoD and CIA, and corporations like Amazon and Apple. The malicious microchip provided adversaries with a backdoor into the system, which further allowed them to access any network that contained the exploited systems, to exfiltrate data to be sent to the Chinese government.[REF-713]::"}]}, {'text': '<mark>"unauthorized data access"</mark>', 'state': {'opened': False}, 'data': {'likelihood': 'Medium', 'severity': 'High'}, 'children': [{'text': '<b>CAPEC ID:</b> 504'}, {'text': '<b>CAPEC Name:</b> Task Impersonation'}, {'text': "<b>CAPEC Description:</b> An adversary, through a previously installed malicious application, impersonates an expected or routine task in an attempt to steal sensitive information or leverage a user's privileges."}, {'text': '<b>CAPEC Likelihood Of Attack:</b> Medium'}, {'text': '<b>CAPEC Typical Severity:</b> High'}, {'text': '<b>CAPEC Mitigations:</b> ::The only known mitigation to this attack is to avoid installing the malicious application on the device. However, to impersonate a running task the malicious application does need the GET_TASKS permission to be able to query the task list, and being suspicious of applications with that permission can help.::'}, {'text': "<b>CAPEC Example Instances:</b> ::An adversary monitors the system task list for Microsoft Outlook in an attempt to determine when the application may prompt the user to enter their credentials to view encrypted email. Once the task is executed, the adversary impersonates the credential prompt to obtain the user's Microsoft Outlook encryption credentials. These credentials can then be leveraged by the adversary to read a user's encrypted email.::An adversary prompts a user to authorize an elevation of privileges, implying that a background task needs additional permissions to execute. The user accepts the privilege elevation, allowing the adversary to execute additional malware or tasks with the user's privileges.::"}]}]}, {'text': 'Web and Mobile Platforms', 'state': {'opened': True}, 'children': [{'text': '<mark>"Cross-site scripting (XSS)"</mark>', 'state': {'opened': False}, 'data': {'likelihood': 'High', 'severity': 'Very High'}, 'children': [{'text': '<b>CAPEC ID:</b> 63'}, {'text': '<b>CAPEC Name:</b> Cross-Site Scripting (XSS)'}, {'text': "<b>CAPEC Description:</b> An adversary embeds malicious scripts in content that will be served to web browsers. The goal of the attack is for the target software, the client-side browser, to execute the script with the users' privilege level. An attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute code and scripts. Web browsers, for example, have some simple security controls in place, but if a remote attacker is allowed to execute scripts (through injecting them in to user-generated content like bulletin boards) then these controls may be bypassed. Further, these attacks are very difficult for an end user to detect."}, {'text': '<b>CAPEC Likelihood Of Attack:</b> High'}, {'text': '<b>CAPEC Typical Severity:</b> Very High'}, {'text': "<b>CAPEC Mitigations:</b> ::Design: Use browser technologies that do not allow client side scripting.::Design: Utilize strict type, character, and encoding enforcement::Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.::Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.::Implementation: Perform input validation for all remote content.::Implementation: Perform output validation for all remote content.::Implementation: Session tokens for specific host::Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.::"}, {'text': "<b>CAPEC Example Instances:</b> ::Classic phishing attacks lure users to click on content that appears trustworthy, such as logos, and links that seem to go to their trusted financial institutions and online auction sites. But instead the attacker appends malicious scripts into the otherwise innocent appearing resources. The HTML source for a standard phishing attack looks like this: <a href=www.exampletrustedsite.com?Name=<script>maliciousscript</script>>Trusted Site</a> When the user clicks the link, the appended script also executes on the local user's machine.::"}]}, {'text': '<mark>"cross-site request forgery (CSRF)"</mark>', 'state': {'opened': False}, 'data': {'likelihood': 'High', 'severity': 'Very High'}, 'children': [{'text': '<b>CAPEC ID:</b> 62'}, {'text': '<b>CAPEC Name:</b> Cross Site Request Forgery'}, {'text': "<b>CAPEC Description:</b> An attacker crafts malicious web links and distributes them (via web pages, email, etc.), typically in a targeted manner, hoping to induce users to click on the link and execute the malicious action against some third-party application. If successful, the action embedded in the malicious link will be processed and accepted by the targeted application with the users' privilege level. This type of attack leverages the persistence and implicit trust placed in user session cookies by many web applications today. In such an architecture, once the user authenticates to an application and a session cookie is created on the user's system, all following transactions for that session are authenticated using that cookie including potential actions initiated by an attacker and simply riding the existing session cookie."}, {'text': '<b>CAPEC Likelihood Of Attack:</b> High'}, {'text': '<b>CAPEC Typical Severity:</b> Very High'}, {'text': '<b>CAPEC Mitigations:</b> ::Use cryptographic tokens to associate a request with a specific action. The token can be regenerated at every request so that if a request with an invalid token is encountered, it can be reliably discarded. The token is considered invalid if it arrived with a request other than the action it was supposed to be associated with.::Although less reliable, the use of the optional HTTP Referrer header can also be used to determine whether an incoming request was actually one that the user is authorized for, in the current context.::Additionally, the user can also be prompted to confirm an action every time an action concerning potentially sensitive data is invoked. This way, even if the attacker manages to get the user to click on a malicious link and request the desired action, the user has a chance to recover by denying confirmation. This solution is also implicitly tied to using a second factor of authentication before performing such actions.::In general, every request must be checked for the appropriate authentication token as well as authorization in the current session context.::'}, {'text': "<b>CAPEC Example Instances:</b> ::While a user is logged into their bank account, an attacker can send an email with some potentially interesting content and require the user to click on a link in the email. The link points to or contains an attacker setup script, probably even within an iFrame, that mimics an actual user form submission to perform a malicious activity, such as transferring funds from the victim's account. The attacker can have the script embedded in, or targeted by, the link perform any arbitrary action as the authenticated user. When this script is executed, the targeted application authenticates and accepts the actions based on the victims existing session cookie.See also: Cross-site request forgery (CSRF) vulnerability in util.pl in @Mail WebMail 4.51 allows remote attackers to modify arbitrary settings and perform unauthorized actions as an arbitrary user, as demonstrated using a settings action in the SRC attribute of an IMG element in an HTML e-mail.::"}]}, {'text': '<mark>"session hijacking"</mark>', 'state': {'opened': False}, 'data': {'likelihood': 'High', 'severity': 'Very High'}, 'children': [{'text': '<b>CAPEC ID:</b> 593'}, {'text': '<b>CAPEC Name:</b> Session Hijacking'}, {'text': "<b>CAPEC Description:</b> This type of attack involves an adversary that exploits weaknesses in an application's use of sessions in performing authentication. The adversary is able to steal or manipulate an active session and use it to gain unathorized access to the application."}, {'text': '<b>CAPEC Likelihood Of Attack:</b> High'}, {'text': '<b>CAPEC Typical Severity:</b> Very High'}, {'text': '<b>CAPEC Mitigations:</b> ::Properly encrypt and sign identity tokens in transit, and use industry standard session key generation mechanisms that utilize high amount of entropy to generate the session key. Many standard web and application servers will perform this task on your behalf. Utilize a session timeout for all sessions. If the user does not explicitly logout, terminate their session after this period of inactivity. If the user logs back in then a new session key should be generated.::'}, {'text': '<b>CAPEC Example Instances:</b> <i>N/A</i>'}]}]}]}, {'text': '<i>Processes</i>', 'state': {'opened': True}, 'children': [{'text': 'Task Management (Create, Assign, Manage Tasks)', 'state': {'opened': True}, 'children': [{'text': '<mark>"Input validation vulnerabilities"</mark>', 'state': {'opened': False}, 'data': {'likelihood': 'High', 'severity': 'Very High'}, 'children': [{'text': '<b>CAPEC ID:</b> 76'}, {'text': '<b>CAPEC Name:</b> Manipulating Web Input to File System Calls'}, {'text': '<b>CAPEC Description:</b> An attacker manipulates inputs to the target software which the target software passes to file system calls in the OS. The goal is to gain access to, and perhaps modify, areas of the file system that the target software did not intend to be accessible.'}, {'text': '<b>CAPEC Likelihood Of Attack:</b> High'}, {'text': '<b>CAPEC Typical Severity:</b> Very High'}, {'text': '<b>CAPEC Mitigations:</b> ::Design: Enforce principle of least privilege.::Design: Ensure all input is validated, and does not contain file system commands::Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.::Design: For interactive user applications, consider if direct file system interface is necessary, instead consider having the application proxy communication.::Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.::'}, {'text': "<b>CAPEC Example Instances:</b> ::The attacker uses relative path traversal to access files in the application. This is an example of accessing user's password file. http://www.example.com/getProfile.jsp?filename=../../../../etc/passwd However, the target application employs regular expressions to make sure no relative path sequences are being passed through the application to the web page. The application would replace all matches from this regex with the empty string. Then an attacker creates special payloads to bypass this filter: http://www.example.com/getProfile.jsp?filename=%2e%2e/%2e%2e/%2e%2e/%2e%2e /etc/passwd When the application gets this input string, it will be the desired vector by the attacker.::"}]}, {'text': '<mark>"business logic flaws"</mark>', 'state': {'opened': False}, 'data': {'likelihood': 'High', 'severity': 'High'}, 'children': [{'text': '<b>CAPEC ID:</b> 1'}, {'text': '<b>CAPEC Name:</b> Accessing Functionality Not Properly Constrained by ACLs'}, {'text': "<b>CAPEC Description:</b> In applications, particularly web applications, access to functionality is mitigated by an authorization framework. This framework maps Access Control Lists (ACLs) to elements of the application's functionality; particularly URL's for web apps. In the case that the administrator failed to specify an ACL for a particular element, an attacker may be able to access it with impunity. An attacker with the ability to access functionality not properly constrained by ACLs can obtain sensitive information and possibly compromise the entire application. Such an attacker can access resources that must be available only to users at a higher privilege level, can access management sections of the application, or can run queries for data that they otherwise not supposed to."}, {'text': '<b>CAPEC Likelihood Of Attack:</b> High'}, {'text': '<b>CAPEC Typical Severity:</b> High'}, {'text': '<b>CAPEC Mitigations:</b> ::In a J2EE setting, administrators can associate a role that is impossible for the authenticator to grant users, such as NoAccess, with all Servlets to which access is guarded by a limited number of servlets visible to, and accessible by, the user. Having done so, any direct access to those protected Servlets will be prohibited by the web container. In a more general setting, the administrator must mark every resource besides the ones supposed to be exposed to the user as accessible by a role impossible for the user to assume. The default security setting must be to deny access and then grant access only to those resources intended by business logic.::'}, {'text': "<b>CAPEC Example Instances:</b> ::Implementing the Model-View-Controller (MVC) within Java EE's Servlet paradigm using a Single front controller pattern that demands that brokered HTTP requests be authenticated before hand-offs to other Action Servlets. If no security-constraint is placed on those Action Servlets, such that positively no one can access them, the front controller can be subverted.::"}]}]}, {'text': 'Real-time Updates and Progress Tracking', 'state': {'opened': True}, 'children': [{'text': '<mark>"Race conditions"</mark>', 'state': {'opened': False}, 'data': {'likelihood': 'High', 'severity': 'High'}, 'children': [{'text': '<b>CAPEC ID:</b> 26'}, {'text': '<b>CAPEC Name:</b> Leveraging Race Conditions'}, {'text': '<b>CAPEC Description:</b> The adversary targets a race condition occurring when multiple processes access and manipulate the same resource concurrently, and the outcome of the execution depends on the particular order in which the access takes place. The adversary can leverage a race condition by running the race, modifying the resource and modifying the normal execution flow. For instance, a race condition can occur while accessing a file: the adversary can trick the system by replacing the original file with their version and cause the system to read the malicious file.'}, {'text': '<b>CAPEC Likelihood Of Attack:</b> High'}, {'text': '<b>CAPEC Typical Severity:</b> High'}, {'text': '<b>CAPEC Mitigations:</b> ::Use safe libraries to access resources such as files.::Be aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc. can cause a race condition.::Use synchronization to control the flow of execution.::Use static analysis tools to find race conditions.::Pay attention to concurrency problems related to the access of resources.::'}, {'text': '<b>CAPEC Example Instances:</b> ::The Net Direct client for Linux before 6.0.5 in Nortel Application Switch 2424, VPN 3050 and 3070, and SSL VPN Module 1000 extracts and executes files with insecure permissions, which allows local users to exploit a race condition to replace a world-writable file in /tmp/NetClient and cause another user to execute arbitrary code when attempting to execute this client, as demonstrated by replacing /tmp/NetClient/client. See also: CVE-2007-1057::The following code illustrates a file that is accessed multiple times by name in a publicly accessible directory. A race condition exists between the accesses where an attacker can replace the file referenced by the name (see [REF-107]). include <sys/types.h>include <fcntl.h>include <unistd.h> define FILE /tmp/myfiledefine UID 100 void test(char *str){int fd;fd = creat(FILE, 0644);if(fd == -1)return; chown(FILE, UID, -1); /* BAD */close(fd); } int main(int argc, char **argv){char *userstr;if(argc > 1) {userstr = argv[1];test(userstr); }return 0; }::'}]}, {'text': '<mark>"information disclosure through unsecured channels"</mark>', 'state': {'opened': False}, 'data': {'likelihood': '', 'severity': 'Medium'}, 'children': [{'text': '<b>CAPEC ID:</b> 639'}, {'text': '<b>CAPEC Name:</b> Probe System Files'}, {'text': '<b>CAPEC Description:</b> An adversary obtains unauthorized information due to improperly protected files. If an application stores sensitive information in a file that is not protected by proper access control, then an adversary can access the file and search for sensitive information.'}, {'text': '<b>CAPEC Likelihood Of Attack:</b> <i>N/A</i>'}, {'text': '<b>CAPEC Typical Severity:</b> Medium'}, {'text': '<b>CAPEC Mitigations:</b> ::Verify that files have proper access controls set, and reduce the storage of sensitive information to only what is necessary.::'}, {'text': '<b>CAPEC Example Instances:</b> ::Adversaries may search local file systems and remote file shares for files containing passwords. These can be files created by users to store their own credentials, shared credential stores for a group of individuals, configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords.::Adversaries may search network shares on computers they have compromised to find files of interest.::'}]}]}, {'text': 'Dashboard Customization', 'state': {'opened': True}, 'children': [{'text': '<mark>"Misconfiguration vulnerabilities"</mark>', 'state': {'opened': False}, 'data': {'likelihood': 'High', 'severity': 'Medium'}, 'children': [{'text': '<b>CAPEC ID:</b> 180'}, {'text': '<b>CAPEC Name:</b> Exploiting Incorrectly Configured Access Control Security Levels'}, {'text': '<b>CAPEC Description:</b> An attacker exploits a weakness in the configuration of access controls and is able to bypass the intended protection that these measures guard against and thereby obtain unauthorized access to the system or network. Sensitive functionality should always be protected with access controls. However configuring all but the most trivial access control systems can be very complicated and there are many opportunities for mistakes. If an attacker can learn of incorrectly configured access security settings, they may be able to exploit this in an attack.'}, {'text': '<b>CAPEC Likelihood Of Attack:</b> High'}, {'text': '<b>CAPEC Typical Severity:</b> Medium'}, {'text': '<b>CAPEC Mitigations:</b> ::Design: Configure the access control correctly.::'}, {'text': '<b>CAPEC Example Instances:</b> ::For example, an incorrectly configured Web server, may allow unauthorized access to it, thus threaten the security of the Web application.::'}]}, {'text': '<mark>"injection attacks"</mark>', 'state': {'opened': False}, 'data': {'likelihood': 'High', 'severity': 'High'}, 'children': [{'text': '<b>CAPEC ID:</b> 240'}, {'text': '<b>CAPEC Name:</b> Resource Injection'}, {'text': '<b>CAPEC Description:</b> An adversary exploits weaknesses in input validation by manipulating resource identifiers enabling the unintended modification or specification of a resource.'}, {'text': '<b>CAPEC Likelihood Of Attack:</b> High'}, {'text': '<b>CAPEC Typical Severity:</b> High'}, {'text': '<b>CAPEC Mitigations:</b> ::Ensure all input content that is delivered to client is sanitized against an acceptable content specification.::Perform input validation for all content.::Enforce regular patching of software.::'}, {'text': '<b>CAPEC Example Instances:</b> <i>N/A</i>'}]}]}, {'text': 'Time Tracking', 'state': {'opened': True}, 'children': [{'text': '<mark>"Data tampering"</mark>', 'state': {'opened': False}, 'data': {'likelihood': 'Low', 'severity': 'High'}, 'children': [{'text': '<b>CAPEC ID:</b> 678'}, {'text': '<b>CAPEC Name:</b> System Build Data Maliciously Altered'}, {'text': '<b>CAPEC Description:</b> During the system build process, the system is deliberately misconfigured by the alteration of the build data. Access to system configuration data files and build processes is susceptible to deliberate misconfiguration of the system.'}, {'text': '<b>CAPEC Likelihood Of Attack:</b> Low'}, {'text': '<b>CAPEC Typical Severity:</b> High'}, {'text': '<b>CAPEC Mitigations:</b> ::Implement configuration management security practices that protect the integrity of software and associated data.::Monitor and control access to the configuration management system.::Harden centralized repositories against attack.::Establish acceptance criteria for configuration management check-in to assure integrity.::Plan for and audit the security of configuration management administration processes.::Maintain configuration control over operational systems.::'}, {'text': '<b>CAPEC Example Instances:</b> ::â\x80\x98Makeâ\x80\x99 is a program used for building executable programs and libraries from source code by executing commands and following rules in a â\x80\x98makefileâ\x80\x99. It can create a malicious executable if commands or dependency paths in the makefile are maliciously altered to execute an unwanted command or reference as a dependency maliciously altered code.::'}]}, {'text': '<mark>"unauthorized time entry manipulation"</mark>', 'state': {'opened': False}, 'data': {'likelihood': '', 'severity': ''}, 'children': [{'text': '<b>CAPEC ID:</b> 268'}, {'text': '<b>CAPEC Name:</b> Audit Log Manipulation'}, {'text': '<b>CAPEC Description:</b> The attacker injects, manipulates, deletes, or forges malicious log entries into the log file, in an attempt to mislead an audit of the log file or cover tracks of an attack. Due to either insufficient access controls of the log files or the logging mechanism, the attacker is able to perform such actions.'}, {'text': '<b>CAPEC Likelihood Of Attack:</b> <i>N/A</i>'}, {'text': '<b>CAPEC Typical Severity:</b> <i>N/A</i>'}, {'text': '<b>CAPEC Mitigations:</b> <i>N/A</i>'}, {'text': '<b>CAPEC Example Instances:</b> <i>N/A</i>'}]}]}, {'text': 'Document Sharing', 'state': {'opened': True}, 'children': [{'text': '<mark>"Data leakage"</mark>', 'state': {'opened': False}, 'data': {'likelihood': 'Medium', 'severity': 'Medium'}, 'children': [{'text': '<b>CAPEC ID:</b> 643'}, {'text': '<b>CAPEC Name:</b> Identify Shared Files/Directories on System'}, {'text': "<b>CAPEC Description:</b> An adversary discovers connections between systems by exploiting the target system's standard practice of revealing them in searchable, common areas. Through the identification of shared folders/drives between systems, the adversary may further their goals of locating and collecting sensitive information/files, or map potential routes for lateral movement within the network."}, {'text': '<b>CAPEC Likelihood Of Attack:</b> Medium'}, {'text': '<b>CAPEC Typical Severity:</b> Medium'}, {'text': '<b>CAPEC Mitigations:</b> ::Identify unnecessary system utilities or potentially malicious software that may contain functionality to identify network share information, and audit and/or block them by using allowlist tools.::'}, {'text': '<b>CAPEC Example Instances:</b> <i>N/A</i>'}]}, {'text': '<mark>"insufficient access controls"</mark>', 'state': {'opened': False}, 'data': {'likelihood': 'High', 'severity': 'Medium'}, 'children': [{'text': '<b>CAPEC ID:</b> 180'}, {'text': '<b>CAPEC Name:</b> Exploiting Incorrectly Configured Access Control Security Levels'}, {'text': '<b>CAPEC Description:</b> An attacker exploits a weakness in the configuration of access controls and is able to bypass the intended protection that these measures guard against and thereby obtain unauthorized access to the system or network. Sensitive functionality should always be protected with access controls. However configuring all but the most trivial access control systems can be very complicated and there are many opportunities for mistakes. If an attacker can learn of incorrectly configured access security settings, they may be able to exploit this in an attack.'}, {'text': '<b>CAPEC Likelihood Of Attack:</b> High'}, {'text': '<b>CAPEC Typical Severity:</b> Medium'}, {'text': '<b>CAPEC Mitigations:</b> ::Design: Configure the access control correctly.::'}, {'text': '<b>CAPEC Example Instances:</b> ::For example, an incorrectly configured Web server, may allow unauthorized access to it, thus threaten the security of the Web application.::'}]}]}, {'text': 'Access Control Management', 'state': {'opened': True}, 'children': [{'text': '<mark>"Broken access control"</mark>', 'state': {'opened': False}, 'data': {'likelihood': 'High', 'severity': 'Medium'}, 'children': [{'text': '<b>CAPEC ID:</b> 180'}, {'text': '<b>CAPEC Name:</b> Exploiting Incorrectly Configured Access Control Security Levels'}, {'text': '<b>CAPEC Description:</b> An attacker exploits a weakness in the configuration of access controls and is able to bypass the intended protection that these measures guard against and thereby obtain unauthorized access to the system or network. Sensitive functionality should always be protected with access controls. However configuring all but the most trivial access control systems can be very complicated and there are many opportunities for mistakes. If an attacker can learn of incorrectly configured access security settings, they may be able to exploit this in an attack.'}, {'text': '<b>CAPEC Likelihood Of Attack:</b> High'}, {'text': '<b>CAPEC Typical Severity:</b> Medium'}, {'text': '<b>CAPEC Mitigations:</b> ::Design: Configure the access control correctly.::'}, {'text': '<b>CAPEC Example Instances:</b> ::For example, an incorrectly configured Web server, may allow unauthorized access to it, thus threaten the security of the Web application.::'}]}, {'text': '<mark>"improper session management"</mark>', 'state': {'opened': False}, 'data': {'likelihood': 'Medium', 'severity': 'High'}, 'children': [{'text': '<b>CAPEC ID:</b> 61'}, {'text': '<b>CAPEC Name:</b> Session Fixation'}, {'text': '<b>CAPEC Description:</b> The attacker induces a client to establish a session with the target software using a session identifier provided by the attacker. Once the user successfully authenticates to the target software, the attacker uses the (now privileged) session identifier in their own transactions. This attack leverages the fact that the target software either relies on client-generated session identifiers or maintains the same session identifiers after privilege elevation.'}, {'text': '<b>CAPEC Likelihood Of Attack:</b> Medium'}, {'text': '<b>CAPEC Typical Severity:</b> High'}, {'text': '<b>CAPEC Mitigations:</b> ::Use a strict session management mechanism that only accepts locally generated session identifiers: This prevents attackers from fixating session identifiers of their own choice.::Regenerate and destroy session identifiers when there is a change in the level of privilege: This ensures that even though a potential victim may have followed a link with a fixated identifier, a new one is issued when the level of privilege changes.::Use session identifiers that are difficult to guess or brute-force: One way for the attackers to obtain valid session identifiers is by brute-forcing or guessing them. By choosing session identifiers that are sufficiently random, brute-forcing or guessing becomes very difficult.::'}, {'text': "<b>CAPEC Example Instances:</b> ::Consider a banking application that issues a session identifier in the URL to a user before login, and uses the same identifier to identify the customer following successful authentication. An attacker can easily leverage session fixation to access a victim's account by having the victim click on a forged link that contains a valid session identifier from a trapped session setup by the attacker. Once the victim is authenticated, the attacker can take over the session and continue with the same levels of privilege as the victim.::An attacker can hijack user sessions, bypass authentication controls and possibly gain administrative privilege by fixating the session of a user authenticating to the Management Console on certain versions of Macromedia JRun 4.0. This can be achieved by setting the session identifier in the user's browser and having the user authenticate to the Management Console. Session fixation is possible since the application server does not regenerate session identifiers when there is a change in the privilege levels. See also: CVE-2004-2182::"}]}]}, {'text': 'Integration with Third-party Applications', 'state': {'opened': True}, 'children': [{'text': '<mark>"API abuse"</mark>', 'state': {'opened': False}, 'data': {'likelihood': 'High', 'severity': 'Medium'}, 'children': [{'text': '<b>CAPEC ID:</b> 510'}, {'text': '<b>CAPEC Name:</b> SaaS User Request Forgery'}, {'text': "<b>CAPEC Description:</b> An adversary, through a previously installed malicious application, performs malicious actions against a third-party Software as a Service (SaaS) application (also known as a cloud based application) by leveraging the persistent and implicit trust placed on a trusted user's session. This attack is executed after a trusted user is authenticated into a cloud service, piggy-backing on the authenticated session, and exploiting the fact that the cloud service believes it is only interacting with the trusted user. If successful, the actions embedded in the malicious application will be processed and accepted by the targeted SaaS application and executed at the trusted user's privilege level."}, {'text': '<b>CAPEC Likelihood Of Attack:</b> High'}, {'text': '<b>CAPEC Typical Severity:</b> Medium'}, {'text': "<b>CAPEC Mitigations:</b> ::To limit one's exposure to this type of attack, tunnel communications through a secure proxy service.::Detection of this type of attack can be done through heuristic analysis of behavioral anomalies (a la credit card fraud detection) which can be used to identify inhuman behavioral patterns. (e.g., spidering)::"}, {'text': '<b>CAPEC Example Instances:</b> <i>N/A</i>'}]}, {'text': '<mark>"data leakage through improper integration"</mark>', 'state': {'opened': False}, 'data': {'likelihood': 'Low', 'severity': 'High'}, 'children': [{'text': '<b>CAPEC ID:</b> 524'}, {'text': '<b>CAPEC Name:</b> Rogue Integration Procedures'}, {'text': '<b>CAPEC Description:</b> An attacker alters or establishes rogue processes in an integration facility in order to insert maliciously altered components into the system. The attacker would then supply the malicious components. This would allow for malicious disruption or additional compromise when the system is deployed.'}, {'text': '<b>CAPEC Likelihood Of Attack:</b> Low'}, {'text': '<b>CAPEC Typical Severity:</b> High'}, {'text': '<b>CAPEC Mitigations:</b> ::Deploy strong code integrity policies to allow only authorized apps to run.::Use endpoint detection and response solutions that can automaticalkly detect and remediate suspicious activities.::Maintain a highly secure build and update infrastructure by immediately applying security patches for OS and software, implementing mandatory integrity controls to ensure only trusted tools run, and requiring multi-factor authentication for admins.::Require SSL for update channels and implement certificate transparency based verification.::Sign everything, including configuration files, XML files and packages.::Develop an incident response process, disclose supply chain incidents and notify customers with accurate and timely information.::Maintain strong physical system access controls and monitor networks and physical facilities for insider threats.::'}, {'text': "<b>CAPEC Example Instances:</b> ::An attacker gains access to a system integrator's documentation for the preparation of purchased systems designated for deployment at the victim's location. As a part of the preparation, the included 100 megabit network card is to be replaced with a 1 gigabit network card. The documentation is altered to reflect the type of 1 gigabit network card to use, and the attacker ensures that this type of network card is provided by the attacker's own supply. The card has additional malicious functionality which will allow for additional compromise by the attacker at the victim location once the system is deployed.::"}]}]}]}, {'text': '<i>Data Stores</i>', 'state': {'opened': True}, 'children': [{'text': 'Task Data (Task details, assignments, progress)', 'state': {'opened': True}, 'children': [{'text': '<mark>"Unauthorized access"</mark>', 'state': {'opened': False}, 'data': {'likelihood': 'Medium', 'severity': 'High'}, 'children': [{'text': '<b>CAPEC ID:</b> 504'}, {'text': '<b>CAPEC Name:</b> Task Impersonation'}, {'text': "<b>CAPEC Description:</b> An adversary, through a previously installed malicious application, impersonates an expected or routine task in an attempt to steal sensitive information or leverage a user's privileges."}, {'text': '<b>CAPEC Likelihood Of Attack:</b> Medium'}, {'text': '<b>CAPEC Typical Severity:</b> High'}, {'text': '<b>CAPEC Mitigations:</b> ::The only known mitigation to this attack is to avoid installing the malicious application on the device. However, to impersonate a running task the malicious application does need the GET_TASKS permission to be able to query the task list, and being suspicious of applications with that permission can help.::'}, {'text': "<b>CAPEC Example Instances:</b> ::An adversary monitors the system task list for Microsoft Outlook in an attempt to determine when the application may prompt the user to enter their credentials to view encrypted email. Once the task is executed, the adversary impersonates the credential prompt to obtain the user's Microsoft Outlook encryption credentials. These credentials can then be leveraged by the adversary to read a user's encrypted email.::An adversary prompts a user to authorize an elevation of privileges, implying that a background task needs additional permissions to execute. The user accepts the privilege elevation, allowing the adversary to execute additional malware or tasks with the user's privileges.::"}]}, {'text': '<mark>"data integrity attacks"</mark>', 'state': {'opened': False}, 'data': {'likelihood': 'Low', 'severity': 'High'}, 'children': [{'text': '<b>CAPEC ID:</b> 536'}, {'text': '<b>CAPEC Name:</b> Data Injected During Configuration'}, {'text': "<b>CAPEC Description:</b> An attacker with access to data files and processes on a victim's system injects malicious data into critical operational data during configuration or recalibration, causing the victim's system to perform in a suboptimal manner that benefits the adversary."}, {'text': '<b>CAPEC Likelihood Of Attack:</b> Low'}, {'text': '<b>CAPEC Typical Severity:</b> High'}, {'text': '<b>CAPEC Mitigations:</b> ::Ensure that proper access control is implemented on all systems to prevent unauthorized access to system files and processes.::'}, {'text': "<b>CAPEC Example Instances:</b> ::An adversary wishes to bypass a security system to access an additional network segment where critical data is kept. The adversary knows that some configurations of the security system will allow for remote bypass under certain conditions, such as switching a specific parameter to a different value. The adversary knows the bypass will work but also will be detected within the logging data of the security system. The adversary waits until an upgrade is performed to the security system by the victim's system administrators, and the adversary has access to an external logging system. The adversary injects false log entries that cause the administrators to think there are two different error states within the security system - one involving the specific parameter and the other involving the logging entries. The specific parameter is adjusted to a different value, and the logging level is reduced to a lower level that will not cause an adversary bypass to be detected. The adversary stops injecting false log data, and the administrators of the security system believe the issues were caused by the upgrade and are now resolved. The adversary is then able to bypass the security system.::"}]}]}, {'text': 'User Data (User roles, access permissions)', 'state': {'opened': True}, 'children': [{'text': '<mark>"Identity theft"</mark>', 'state': {'opened': False}, 'data': {'likelihood': 'High', 'severity': 'High'}, 'children': [{'text': '<b>CAPEC ID:</b> 21'}, {'text': '<b>CAPEC Name:</b> Exploitation of Trusted Identifiers'}, {'text': '<b>CAPEC Description:</b> An adversary guesses, obtains, or rides a trusted identifier (e.g. session ID, resource ID, cookie, etc.) to perform authorized actions under the guise of an authenticated user or service.'}, {'text': '<b>CAPEC Likelihood Of Attack:</b> High'}, {'text': '<b>CAPEC Typical Severity:</b> High'}, {'text': '<b>CAPEC Mitigations:</b> ::Design: utilize strong federated identity such as SAML to encrypt and sign identity tokens in transit.::Implementation: Use industry standards session key generation mechanisms that utilize high amount of entropy to generate the session key. Many standard web and application servers will perform this task on your behalf.::Implementation: If the identifier is used for authentication, such as in the so-called single sign on use cases, then ensure that it is protected at the same level of assurance as authentication tokens.::Implementation: If the web or application server supports it, then encrypting and/or signing the identifier (such as cookie) can protect the ID if intercepted.::Design: Use strong session identifiers that are protected in transit and at rest.::Implementation: Utilize a session timeout for all sessions, for example 20 minutes. If the user does not explicitly logout, the server terminates their session after this period of inactivity. If the user logs back in then a new session key is generated.::Implementation: Verify authenticity of all identifiers at runtime.::'}, {'text': "<b>CAPEC Example Instances:</b> ::Thin client applications like web applications are particularly vulnerable to session ID attacks. Since the server has very little control over the client, but still must track sessions, data, and objects on the server side, cookies and other mechanisms have been used to pass the key to the session data between the client and server. When these session keys are compromised it is trivial for an adversary to impersonate a user's session in effect, have the same capabilities as the authorized user. There are two main ways for an adversary to exploit session IDs. A brute force attack involves an adversary repeatedly attempting to query the system with a spoofed session header in the HTTP request. A web server that uses a short session ID can be easily spoofed by trying many possible combinations so the parameters session-ID= 1234 has few possible combinations, and an adversary can retry several hundred or thousand request with little to no issue on their side. The second method is interception, where a tool such as wireshark is used to sniff the wire and pull off any unprotected session identifiers. The adversary can then use these variables and access the application.::For example, in a message queuing system that allows service requesters to post messages to its queue through an open channel (such as anonymous FTP), authorization is done through checking group or role membership contained in the posted message. However, there is no proof that the message itself, the information in the message (such group or role membership), or the process that wrote the message to the queue is authentic and authorized to do so.::"}]}, {'text': '<mark>"privilege escalation"</mark>', 'state': {'opened': False}, 'data': {'likelihood': '', 'severity': ''}, 'children': [{'text': '<b>CAPEC ID:</b> 233'}, {'text': '<b>CAPEC Name:</b> Privilege Escalation'}, {'text': '<b>CAPEC Description:</b> An adversary exploits a weakness enabling them to elevate their privilege and perform an action that they are not supposed to be authorized to perform.'}, {'text': '<b>CAPEC Likelihood Of Attack:</b> <i>N/A</i>'}, {'text': '<b>CAPEC Typical Severity:</b> <i>N/A</i>'}, {'text': '<b>CAPEC Mitigations:</b> <i>N/A</i>'}, {'text': '<b>CAPEC Example Instances:</b> <i>N/A</i>'}]}, {'text': '<mark>"data breaches"</mark>', 'state': {'opened': False}, 'data': {'likelihood': 'High', 'severity': 'Medium'}, 'children': [{'text': '<b>CAPEC ID:</b> 122'}, {'text': '<b>CAPEC Name:</b> Privilege Abuse'}, {'text': '<b>CAPEC Description:</b> An adversary is able to exploit features of the target that should be reserved for privileged users or administrators but are exposed to use by lower or non-privileged accounts. Access to sensitive information and functionality must be controlled to ensure that only authorized users are able to access these resources.'}, {'text': '<b>CAPEC Likelihood Of Attack:</b> High'}, {'text': '<b>CAPEC Typical Severity:</b> Medium'}, {'text': '<b>CAPEC Mitigations:</b> ::Configure account privileges such privileged/administrator functionality is not exposed to non-privileged/lower accounts.::'}, {'text': "<b>CAPEC Example Instances:</b> ::Improperly configured account privileges allowed unauthorized users on a hospital's network to access the medical records for over 3,000 patients. Thus compromising data integrity and confidentiality in addition to HIPAA violations.::"}]}]}, {'text': 'Dashboard Configuration Data', 'state': {'opened': True}, 'children': [{'text': '<mark>"Misconfiguration"</mark>', 'state': {'opened': False}, 'data': {'likelihood': 'High', 'severity': 'Medium'}, 'children': [{'text': '<b>CAPEC ID:</b> 180'}, {'text': '<b>CAPEC Name:</b> Exploiting Incorrectly Configured Access Control Security Levels'}, {'text': '<b>CAPEC Description:</b> An attacker exploits a weakness in the configuration of access controls and is able to bypass the intended protection that these measures guard against and thereby obtain unauthorized access to the system or network. Sensitive functionality should always be protected with access controls. However configuring all but the most trivial access control systems can be very complicated and there are many opportunities for mistakes. If an attacker can learn of incorrectly configured access security settings, they may be able to exploit this in an attack.'}, {'text': '<b>CAPEC Likelihood Of Attack:</b> High'}, {'text': '<b>CAPEC Typical Severity:</b> Medium'}, {'text': '<b>CAPEC Mitigations:</b> ::Design: Configure the access control correctly.::'}, {'text': '<b>CAPEC Example Instances:</b> ::For example, an incorrectly configured Web server, may allow unauthorized access to it, thus threaten the security of the Web application.::'}]}, {'text': '<mark>"unauthorized modifications"</mark>', 'state': {'opened': False}, 'data': {'likelihood': 'Low', 'severity': 'High'}, 'children': [{'text': '<b>CAPEC ID:</b> 678'}, {'text': '<b>CAPEC Name:</b> System Build Data Maliciously Altered'}, {'text': '<b>CAPEC Description:</b> During the system build process, the system is deliberately misconfigured by the alteration of the build data. Access to system configuration data files and build processes is susceptible to deliberate misconfiguration of the system.'}, {'text': '<b>CAPEC Likelihood Of Attack:</b> Low'}, {'text': '<b>CAPEC Typical Severity:</b> High'}, {'text': '<b>CAPEC Mitigations:</b> ::Implement configuration management security practices that protect the integrity of software and associated data.::Monitor and control access to the configuration management system.::Harden centralized repositories against attack.::Establish acceptance criteria for configuration management check-in to assure integrity.::Plan for and audit the security of configuration management administration processes.::Maintain configuration control over operational systems.::'}, {'text': '<b>CAPEC Example Instances:</b> ::â\x80\x98Makeâ\x80\x99 is a program used for building executable programs and libraries from source code by executing commands and following rules in a â\x80\x98makefileâ\x80\x99. It can create a malicious executable if commands or dependency paths in the makefile are maliciously altered to execute an unwanted command or reference as a dependency maliciously altered code.::'}]}]}, {'text': 'Time Tracking Data', 'state': {'opened': True}, 'children': [{'text': '<mark>"Data tampering"</mark>', 'state': {'opened': False}, 'data': {'likelihood': 'Low', 'severity': 'High'}, 'children': [{'text': '<b>CAPEC ID:</b> 678'}, {'text': '<b>CAPEC Name:</b> System Build Data Maliciously Altered'}, {'text': '<b>CAPEC Description:</b> During the system build process, the system is deliberately misconfigured by the alteration of the build data. Access to system configuration data files and build processes is susceptible to deliberate misconfiguration of the system.'}, {'text': '<b>CAPEC Likelihood Of Attack:</b> Low'}, {'text': '<b>CAPEC Typical Severity:</b> High'}, {'text': '<b>CAPEC Mitigations:</b> ::Implement configuration management security practices that protect the integrity of software and associated data.::Monitor and control access to the configuration management system.::Harden centralized repositories against attack.::Establish acceptance criteria for configuration management check-in to assure integrity.::Plan for and audit the security of configuration management administration processes.::Maintain configuration control over operational systems.::'}, {'text': '<b>CAPEC Example Instances:</b> ::â\x80\x98Makeâ\x80\x99 is a program used for building executable programs and libraries from source code by executing commands and following rules in a â\x80\x98makefileâ\x80\x99. It can create a malicious executable if commands or dependency paths in the makefile are maliciously altered to execute an unwanted command or reference as a dependency maliciously altered code.::'}]}, {'text': '<mark>"unauthorized access"</mark>', 'state': {'opened': False}, 'data': {'likelihood': 'Low', 'severity': 'Low'}, 'children': [{'text': '<b>CAPEC ID:</b> 577'}, {'text': '<b>CAPEC Name:</b> Owner Footprinting'}, {'text': "<b>CAPEC Description:</b> An adversary exploits functionality meant to identify information about the primary users on the target system to an authorized user. They may do this, for example, by reviewing logins or file modification times. By knowing what owners use the target system, the adversary can inform further and more targeted malicious behavior. An example Windows command that may accomplish this is dir /A ntuser.dat. Which will display the last modified time of a user's ntuser.dat file when run within the root folder of a user. This time is synonymous with the last time that user was logged in."}, {'text': '<b>CAPEC Likelihood Of Attack:</b> Low'}, {'text': '<b>CAPEC Typical Severity:</b> Low'}, {'text': '<b>CAPEC Mitigations:</b> ::Ensure that proper permissions on files and folders are enacted to limit accessibility.::'}, {'text': '<b>CAPEC Example Instances:</b> <i>N/A</i>'}]}]}, {'text': 'Document Repository', 'state': {'opened': True}, 'children': [{'text': '<mark>"Unauthorized access"</mark>', 'state': {'opened': False}, 'data': {'likelihood': '', 'severity': 'Medium'}, 'children': [{'text': '<b>CAPEC ID:</b> 639'}, {'text': '<b>CAPEC Name:</b> Probe System Files'}, {'text': '<b>CAPEC Description:</b> An adversary obtains unauthorized information due to improperly protected files. If an application stores sensitive information in a file that is not protected by proper access control, then an adversary can access the file and search for sensitive information.'}, {'text': '<b>CAPEC Likelihood Of Attack:</b> <i>N/A</i>'}, {'text': '<b>CAPEC Typical Severity:</b> Medium'}, {'text': '<b>CAPEC Mitigations:</b> ::Verify that files have proper access controls set, and reduce the storage of sensitive information to only what is necessary.::'}, {'text': '<b>CAPEC Example Instances:</b> ::Adversaries may search local file systems and remote file shares for files containing passwords. These can be files created by users to store their own credentials, shared credential stores for a group of individuals, configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords.::Adversaries may search network shares on computers they have compromised to find files of interest.::'}]}, {'text': '<mark>"data breaches"</mark>', 'state': {'opened': False}, 'data': {'likelihood': 'Low', 'severity': 'High'}, 'children': [{'text': '<b>CAPEC ID:</b> 518'}, {'text': '<b>CAPEC Name:</b> Documentation Alteration to Produce Under-performing Systems'}, {'text': "<b>CAPEC Description:</b> An attacker with access to a manufacturer's documentation alters the descriptions of system capabilities with the intent of causing errors in derived system requirements, impacting the overall effectiveness and capability of the system, allowing an attacker to take advantage of the introduced system capability flaw once the system is deployed."}, {'text': '<b>CAPEC Likelihood Of Attack:</b> Low'}, {'text': '<b>CAPEC Typical Severity:</b> High'}, {'text': '<b>CAPEC Mitigations:</b> ::Digitize documents and cryptographically sign them to verify authenticity.::Password protect documents and make them read-only for unauthorized users.::Avoid emailing important documents and configurations.::Ensure deleted files are actually deleted.::Maintain backups of the document for recovery and verification.::Separate need-to-know information from system configuration information depending on the user.::'}, {'text': '<b>CAPEC Example Instances:</b> ::A security subsystem involving encryption is a part of a product, but due to the demands of this subsystem during operation, the subsystem only runs when a specific amount of memory and processing is available. An attacker alters the descriptions of the system capabilities so that when deployed with the minimal requirements at the victim location, the encryption subsystem is never operational, leaving the system in a weakened security state.::'}]}]}, {'text': 'Integration Data (Data exchanged with third-party apps)', 'state': {'opened': True}, 'children': [{'text': '<mark>"Data interception"</mark>', 'state': {'opened': False}, 'data': {'likelihood': '', 'severity': ''}, 'children': [{'text': '<b>CAPEC ID:</b> 499'}, {'text': '<b>CAPEC Name:</b> Android Intent Intercept'}, {'text': '<b>CAPEC Description:</b> An adversary, through a previously installed malicious application, intercepts messages from a trusted Android-based application in an attempt to achieve a variety of different objectives including denial of service, information disclosure, and data injection. An implicit intent sent from a trusted application can be received by any application that has declared an appropriate intent filter. If the intent is not protected by a permission that the malicious application lacks, then the attacker can gain access to the data contained within the intent. Further, the intent can be either blocked from reaching the intended destination, or modified and potentially forwarded along.'}, {'text': '<b>CAPEC Likelihood Of Attack:</b> <i>N/A</i>'}, {'text': '<b>CAPEC Typical Severity:</b> <i>N/A</i>'}, {'text': '<b>CAPEC Mitigations:</b> ::To mitigate this type of an attack, explicit intents should be used whenever sensitive data is being sent. An explicit intent is delivered to a specific application as declared within the intent, whereas the Android operating system determines who receives an implicit intent which could potentially be a malicious application. If an implicit intent must be used, then it should be assumed that the intent will be received by an unknown application and any response should be treated accordingly. Implicit intents should never be used for inter-application communication.::'}, {'text': '<b>CAPEC Example Instances:</b> <i>N/A</i>'}]}, {'text': '<mark>"man-in-the-middle attacks"</mark>', 'state': {'opened': False}, 'data': {'likelihood': 'High', 'severity': 'Very High'}, 'children': [{'text': '<b>CAPEC ID:</b> 94'}, {'text': '<b>CAPEC Name:</b> Adversary in the Middle (AiTM)'}, {'text': '<b>CAPEC Description:</b> An adversary targets the communication between two components (typically client and server), in order to alter or obtain data from transactions. A general approach entails the adversary placing themself within the communication channel between the two components.'}, {'text': '<b>CAPEC Likelihood Of Attack:</b> High'}, {'text': '<b>CAPEC Typical Severity:</b> Very High'}, {'text': '<b>CAPEC Mitigations:</b> ::Ensure Public Keys are signed by a Certificate Authority::Encrypt communications using cryptography (e.g., SSL/TLS)::Use Strong mutual authentication to always fully authenticate both ends of any communications channel.::Exchange public keys using a secure channel::'}, {'text': '<b>CAPEC Example Instances:</b> ::In 2017, security researcher Jerry Decime discovered that Equifax mobile applications were not leveraging HTTPS in all areas. Although authentication was properly utilizing HTTPS, in addition to validating the root of trust of the server certificate, other areas of the application were using HTTP to communicate. Adversaries could then conduct MITM attacks on rogue WiFi or cellular networks and hijack the UX. This further allowed the adversaries to prompt users for sensitive data, which could then be obtained in the plaintext response. [REF-636]::'}]}]}]}, {'text': '<i>Data Flows</i>', 'state': {'opened': True}, 'children': [{'text': 'User actions to Task Management process (Creating, Assigning, Updating Tasks)', 'state': {'opened': True}, 'children': [{'text': '<mark>"Injection attacks"</mark>', 'state': {'opened': False}, 'data': {'likelihood': 'High', 'severity': 'High'}, 'children': [{'text': '<b>CAPEC ID:</b> 240'}, {'text': '<b>CAPEC Name:</b> Resource Injection'}, {'text': '<b>CAPEC Description:</b> An adversary exploits weaknesses in input validation by manipulating resource identifiers enabling the unintended modification or specification of a resource.'}, {'text': '<b>CAPEC Likelihood Of Attack:</b> High'}, {'text': '<b>CAPEC Typical Severity:</b> High'}, {'text': '<b>CAPEC Mitigations:</b> ::Ensure all input content that is delivered to client is sanitized against an acceptable content specification.::Perform input validation for all content.::Enforce regular patching of software.::'}, {'text': '<b>CAPEC Example Instances:</b> <i>N/A</i>'}]}, {'text': '<mark>"improper input validation"</mark>', 'state': {'opened': False}, 'data': {'likelihood': '', 'severity': 'Medium'}, 'children': [{'text': '<b>CAPEC ID:</b> 153'}, {'text': '<b>CAPEC Name:</b> Input Data Manipulation'}, {'text': '<b>CAPEC Description:</b> An attacker exploits a weakness in input validation by controlling the format, structure, and composition of data to an input-processing interface. By supplying input of a non-standard or unexpected form an attacker can adversely impact the security of the target.'}, {'text': '<b>CAPEC Likelihood Of Attack:</b> <i>N/A</i>'}, {'text': '<b>CAPEC Typical Severity:</b> Medium'}, {'text': '<b>CAPEC Mitigations:</b> <i>N/A</i>'}, {'text': '<b>CAPEC Example Instances:</b> <i>N/A</i>'}]}]}, {'text': 'Task updates to User interfaces for Real-time Updates and Progress Tracking', 'state': {'opened': True}, 'children': [{'text': '<mark>"Insecure data transmission"</mark>', 'state': {'opened': False}, 'data': {'likelihood': 'High', 'severity': 'High'}, 'children': [{'text': '<b>CAPEC ID:</b> 187'}, {'text': '<b>CAPEC Name:</b> Malicious Automated Software Update via Redirection'}, {'text': '<b>CAPEC Description:</b> An attacker exploits two layers of weaknesses in server or client software for automated update mechanisms to undermine the integrity of the target code-base. The first weakness involves a failure to properly authenticate a server as a source of update or patch content. This type of weakness typically results from authentication mechanisms which can be defeated, allowing a hostile server to satisfy the criteria that establish a trust relationship. The second weakness is a systemic failure to validate the identity and integrity of code downloaded from a remote location, hence the inability to distinguish malicious code from a legitimate update.'}, {'text': '<b>CAPEC Likelihood Of Attack:</b> High'}, {'text': '<b>CAPEC Typical Severity:</b> High'}, {'text': '<b>CAPEC Mitigations:</b> <i>N/A</i>'}, {'text': '<b>CAPEC Example Instances:</b> <i>N/A</i>'}]}, {'text': '<mark>"data leakage"</mark>', 'state': {'opened': False}, 'data': {'likelihood': 'Medium', 'severity': 'High'}, 'children': [{'text': '<b>CAPEC ID:</b> 504'}, {'text': '<b>CAPEC Name:</b> Task Impersonation'}, {'text': "<b>CAPEC Description:</b> An adversary, through a previously installed malicious application, impersonates an expected or routine task in an attempt to steal sensitive information or leverage a user's privileges."}, {'text': '<b>CAPEC Likelihood Of Attack:</b> Medium'}, {'text': '<b>CAPEC Typical Severity:</b> High'}, {'text': '<b>CAPEC Mitigations:</b> ::The only known mitigation to this attack is to avoid installing the malicious application on the device. However, to impersonate a running task the malicious application does need the GET_TASKS permission to be able to query the task list, and being suspicious of applications with that permission can help.::'}, {'text': "<b>CAPEC Example Instances:</b> ::An adversary monitors the system task list for Microsoft Outlook in an attempt to determine when the application may prompt the user to enter their credentials to view encrypted email. Once the task is executed, the adversary impersonates the credential prompt to obtain the user's Microsoft Outlook encryption credentials. These credentials can then be leveraged by the adversary to read a user's encrypted email.::An adversary prompts a user to authorize an elevation of privileges, implying that a background task needs additional permissions to execute. The user accepts the privilege elevation, allowing the adversary to execute additional malware or tasks with the user's privileges.::"}]}]}, {'text': 'User inputs to Dashboard Customization process', 'state': {'opened': True}, 'children': [{'text': '<mark>"Injection attacks"</mark>', 'state': {'opened': False}, 'data': {'likelihood': 'High', 'severity': 'High'}, 'children': [{'text': '<b>CAPEC ID:</b> 240'}, {'text': '<b>CAPEC Name:</b> Resource Injection'}, {'text': '<b>CAPEC Description:</b> An adversary exploits weaknesses in input validation by manipulating resource identifiers enabling the unintended modification or specification of a resource.'}, {'text': '<b>CAPEC Likelihood Of Attack:</b> High'}, {'text': '<b>CAPEC Typical Severity:</b> High'}, {'text': '<b>CAPEC Mitigations:</b> ::Ensure all input content that is delivered to client is sanitized against an acceptable content specification.::Perform input validation for all content.::Enforce regular patching of software.::'}, {'text': '<b>CAPEC Example Instances:</b> <i>N/A</i>'}]}, {'text': '<mark>"cross-site scripting (XSS)"</mark>', 'state': {'opened': False}, 'data': {'likelihood': 'High', 'severity': 'Very High'}, 'children': [{'text': '<b>CAPEC ID:</b> 63'}, {'text': '<b>CAPEC Name:</b> Cross-Site Scripting (XSS)'}, {'text': "<b>CAPEC Description:</b> An adversary embeds malicious scripts in content that will be served to web browsers. The goal of the attack is for the target software, the client-side browser, to execute the script with the users' privilege level. An attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute code and scripts. Web browsers, for example, have some simple security controls in place, but if a remote attacker is allowed to execute scripts (through injecting them in to user-generated content like bulletin boards) then these controls may be bypassed. Further, these attacks are very difficult for an end user to detect."}, {'text': '<b>CAPEC Likelihood Of Attack:</b> High'}, {'text': '<b>CAPEC Typical Severity:</b> Very High'}, {'text': "<b>CAPEC Mitigations:</b> ::Design: Use browser technologies that do not allow client side scripting.::Design: Utilize strict type, character, and encoding enforcement::Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.::Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.::Implementation: Perform input validation for all remote content.::Implementation: Perform output validation for all remote content.::Implementation: Session tokens for specific host::Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.::"}, {'text': "<b>CAPEC Example Instances:</b> ::Classic phishing attacks lure users to click on content that appears trustworthy, such as logos, and links that seem to go to their trusted financial institutions and online auction sites. But instead the attacker appends malicious scripts into the otherwise innocent appearing resources. The HTML source for a standard phishing attack looks like this: <a href=www.exampletrustedsite.com?Name=<script>maliciousscript</script>>Trusted Site</a> When the user clicks the link, the appended script also executes on the local user's machine.::"}]}]}, {'text': 'Time tracking entries to Time Tracking process and data store', 'state': {'opened': True}, 'children': [{'text': '<mark>"Data tampering"</mark>', 'state': {'opened': False}, 'data': {'likelihood': 'Low', 'severity': 'High'}, 'children': [{'text': '<b>CAPEC ID:</b> 536'}, {'text': '<b>CAPEC Name:</b> Data Injected During Configuration'}, {'text': "<b>CAPEC Description:</b> An attacker with access to data files and processes on a victim's system injects malicious data into critical operational data during configuration or recalibration, causing the victim's system to perform in a suboptimal manner that benefits the adversary."}, {'text': '<b>CAPEC Likelihood Of Attack:</b> Low'}, {'text': '<b>CAPEC Typical Severity:</b> High'}, {'text': '<b>CAPEC Mitigations:</b> ::Ensure that proper access control is implemented on all systems to prevent unauthorized access to system files and processes.::'}, {'text': "<b>CAPEC Example Instances:</b> ::An adversary wishes to bypass a security system to access an additional network segment where critical data is kept. The adversary knows that some configurations of the security system will allow for remote bypass under certain conditions, such as switching a specific parameter to a different value. The adversary knows the bypass will work but also will be detected within the logging data of the security system. The adversary waits until an upgrade is performed to the security system by the victim's system administrators, and the adversary has access to an external logging system. The adversary injects false log entries that cause the administrators to think there are two different error states within the security system - one involving the specific parameter and the other involving the logging entries. The specific parameter is adjusted to a different value, and the logging level is reduced to a lower level that will not cause an adversary bypass to be detected. The adversary stops injecting false log data, and the administrators of the security system believe the issues were caused by the upgrade and are now resolved. The adversary is then able to bypass the security system.::"}]}, {'text': '<mark>"unauthorized data manipulation"</mark>', 'state': {'opened': False}, 'data': {'likelihood': '', 'severity': ''}, 'children': [{'text': '<b>CAPEC ID:</b> 268'}, {'text': '<b>CAPEC Name:</b> Audit Log Manipulation'}, {'text': '<b>CAPEC Description:</b> The attacker injects, manipulates, deletes, or forges malicious log entries into the log file, in an attempt to mislead an audit of the log file or cover tracks of an attack. Due to either insufficient access controls of the log files or the logging mechanism, the attacker is able to perform such actions.'}, {'text': '<b>CAPEC Likelihood Of Attack:</b> <i>N/A</i>'}, {'text': '<b>CAPEC Typical Severity:</b> <i>N/A</i>'}, {'text': '<b>CAPEC Mitigations:</b> <i>N/A</i>'}, {'text': '<b>CAPEC Example Instances:</b> <i>N/A</i>'}]}]}, {'text': 'Documents uploaded/downloaded to/from Document Repository', 'state': {'opened': True}, 'children': [{'text': '<mark>"Insufficient encryption"</mark>', 'state': {'opened': False}, 'data': {'likelihood': 'Low', 'severity': 'High'}, 'children': [{'text': '<b>CAPEC ID:</b> 518'}, {'text': '<b>CAPEC Name:</b> Documentation Alteration to Produce Under-performing Systems'}, {'text': "<b>CAPEC Description:</b> An attacker with access to a manufacturer's documentation alters the descriptions of system capabilities with the intent of causing errors in derived system requirements, impacting the overall effectiveness and capability of the system, allowing an attacker to take advantage of the introduced system capability flaw once the system is deployed."}, {'text': '<b>CAPEC Likelihood Of Attack:</b> Low'}, {'text': '<b>CAPEC Typical Severity:</b> High'}, {'text': '<b>CAPEC Mitigations:</b> ::Digitize documents and cryptographically sign them to verify authenticity.::Password protect documents and make them read-only for unauthorized users.::Avoid emailing important documents and configurations.::Ensure deleted files are actually deleted.::Maintain backups of the document for recovery and verification.::Separate need-to-know information from system configuration information depending on the user.::'}, {'text': '<b>CAPEC Example Instances:</b> ::A security subsystem involving encryption is a part of a product, but due to the demands of this subsystem during operation, the subsystem only runs when a specific amount of memory and processing is available. An attacker alters the descriptions of the system capabilities so that when deployed with the minimal requirements at the victim location, the encryption subsystem is never operational, leaving the system in a weakened security state.::'}]}, {'text': '<mark>"data exfiltration"</mark>', 'state': {'opened': False}, 'data': {'likelihood': 'High', 'severity': 'Very High'}, 'children': [{'text': '<b>CAPEC ID:</b> 37'}, {'text': '<b>CAPEC Name:</b> Retrieve Embedded Sensitive Data'}, {'text': '<b>CAPEC Description:</b> An attacker examines a target system to find sensitive data that has been embedded within it. This information can reveal confidential contents, such as account numbers or individual keys/credentials that can be used as an intermediate step in a larger attack.'}, {'text': '<b>CAPEC Likelihood Of Attack:</b> High'}, {'text': '<b>CAPEC Typical Severity:</b> Very High'}, {'text': '<b>CAPEC Mitigations:</b> <i>N/A</i>'}, {'text': "<b>CAPEC Example Instances:</b> ::Using a tool such as 'strings' or similar to pull out text data, perhaps part of a database table, that extends beyond what a particular user's purview should be.::An attacker can also use a decompiler to decompile a downloaded Java applet in order to look for information such as hardcoded IP addresses, file paths, passwords or other such contents.::Attacker uses a tool such as a browser plug-in to pull cookie or other token information that, from a previous user at the same machine (perhaps a kiosk), allows the attacker to log in as the previous user.::"}]}]}, {'text': 'Access control decisions communicated to different processes', 'state': {'opened': True}, 'children': [{'text': '<mark>"Broken access control"</mark>', 'state': {'opened': False}, 'data': {'likelihood': 'High', 'severity': 'High'}, 'children': [{'text': '<b>CAPEC ID:</b> 1'}, {'text': '<b>CAPEC Name:</b> Accessing Functionality Not Properly Constrained by ACLs'}, {'text': "<b>CAPEC Description:</b> In applications, particularly web applications, access to functionality is mitigated by an authorization framework. This framework maps Access Control Lists (ACLs) to elements of the application's functionality; particularly URL's for web apps. In the case that the administrator failed to specify an ACL for a particular element, an attacker may be able to access it with impunity. An attacker with the ability to access functionality not properly constrained by ACLs can obtain sensitive information and possibly compromise the entire application. Such an attacker can access resources that must be available only to users at a higher privilege level, can access management sections of the application, or can run queries for data that they otherwise not supposed to."}, {'text': '<b>CAPEC Likelihood Of Attack:</b> High'}, {'text': '<b>CAPEC Typical Severity:</b> High'}, {'text': '<b>CAPEC Mitigations:</b> ::In a J2EE setting, administrators can associate a role that is impossible for the authenticator to grant users, such as NoAccess, with all Servlets to which access is guarded by a limited number of servlets visible to, and accessible by, the user. Having done so, any direct access to those protected Servlets will be prohibited by the web container. In a more general setting, the administrator must mark every resource besides the ones supposed to be exposed to the user as accessible by a role impossible for the user to assume. The default security setting must be to deny access and then grant access only to those resources intended by business logic.::'}, {'text': "<b>CAPEC Example Instances:</b> ::Implementing the Model-View-Controller (MVC) within Java EE's Servlet paradigm using a Single front controller pattern that demands that brokered HTTP requests be authenticated before hand-offs to other Action Servlets. If no security-constraint is placed on those Action Servlets, such that positively no one can access them, the front controller can be subverted.::"}]}, {'text': '<mark>"unauthorized access"</mark>', 'state': {'opened': False}, 'data': {'likelihood': 'High', 'severity': 'High'}, 'children': [{'text': '<b>CAPEC ID:</b> 1'}, {'text': '<b>CAPEC Name:</b> Accessing Functionality Not Properly Constrained by ACLs'}, {'text': "<b>CAPEC Description:</b> In applications, particularly web applications, access to functionality is mitigated by an authorization framework. This framework maps Access Control Lists (ACLs) to elements of the application's functionality; particularly URL's for web apps. In the case that the administrator failed to specify an ACL for a particular element, an attacker may be able to access it with impunity. An attacker with the ability to access functionality not properly constrained by ACLs can obtain sensitive information and possibly compromise the entire application. Such an attacker can access resources that must be available only to users at a higher privilege level, can access management sections of the application, or can run queries for data that they otherwise not supposed to."}, {'text': '<b>CAPEC Likelihood Of Attack:</b> High'}, {'text': '<b>CAPEC Typical Severity:</b> High'}, {'text': '<b>CAPEC Mitigations:</b> ::In a J2EE setting, administrators can associate a role that is impossible for the authenticator to grant users, such as NoAccess, with all Servlets to which access is guarded by a limited number of servlets visible to, and accessible by, the user. Having done so, any direct access to those protected Servlets will be prohibited by the web container. In a more general setting, the administrator must mark every resource besides the ones supposed to be exposed to the user as accessible by a role impossible for the user to assume. The default security setting must be to deny access and then grant access only to those resources intended by business logic.::'}, {'text': "<b>CAPEC Example Instances:</b> ::Implementing the Model-View-Controller (MVC) within Java EE's Servlet paradigm using a Single front controller pattern that demands that brokered HTTP requests be authenticated before hand-offs to other Action Servlets. If no security-constraint is placed on those Action Servlets, such that positively no one can access them, the front controller can be subverted.::"}]}]}, {'text': 'Data exchanges between system and Third-party Applications', 'state': {'opened': True}, 'children': [{'text': '<mark>"API exploitation"</mark>', 'state': {'opened': False}, 'data': {'likelihood': '', 'severity': 'Low'}, 'children': [{'text': '<b>CAPEC ID:</b> 383'}, {'text': '<b>CAPEC Name:</b> Harvesting Information via API Event Monitoring'}, {'text': '<b>CAPEC Description:</b> An adversary hosts an event within an application framework and then monitors the data exchanged during the course of the event for the purpose of harvesting any important data leaked during the transactions. One example could be harvesting lists of usernames or userIDs for the purpose of sending spam messages to those users. One example of this type of attack involves the adversary creating an event within the sub-application. Assume the adversary hosts a virtual sale of rare items. As other users enter the event, the attacker records via AiTM (CAPEC-94) proxy the user_ids and usernames of everyone who attends. The adversary would then be able to spam those users within the application using an automated script.'}, {'text': '<b>CAPEC Likelihood Of Attack:</b> <i>N/A</i>'}, {'text': '<b>CAPEC Typical Severity:</b> Low'}, {'text': '<b>CAPEC Mitigations:</b> ::Leverage encryption techniques during information transactions so as to protect them from attack patterns of this kind.::'}, {'text': '<b>CAPEC Example Instances:</b> <i>N/A</i>'}]}, {'text': '<mark>"data interception"</mark>', 'state': {'opened': False}, 'data': {'likelihood': '', 'severity': ''}, 'children': [{'text': '<b>CAPEC ID:</b> 499'}, {'text': '<b>CAPEC Name:</b> Android Intent Intercept'}, {'text': '<b>CAPEC Description:</b> An adversary, through a previously installed malicious application, intercepts messages from a trusted Android-based application in an attempt to achieve a variety of different objectives including denial of service, information disclosure, and data injection. An implicit intent sent from a trusted application can be received by any application that has declared an appropriate intent filter. If the intent is not protected by a permission that the malicious application lacks, then the attacker can gain access to the data contained within the intent. Further, the intent can be either blocked from reaching the intended destination, or modified and potentially forwarded along.'}, {'text': '<b>CAPEC Likelihood Of Attack:</b> <i>N/A</i>'}, {'text': '<b>CAPEC Typical Severity:</b> <i>N/A</i>'}, {'text': '<b>CAPEC Mitigations:</b> ::To mitigate this type of an attack, explicit intents should be used whenever sensitive data is being sent. An explicit intent is delivered to a specific application as declared within the intent, whereas the Android operating system determines who receives an implicit intent which could potentially be a malicious application. If an implicit intent must be used, then it should be assumed that the intent will be received by an unknown application and any response should be treated accordingly. Implicit intents should never be used for inter-application communication.::'}, {'text': '<b>CAPEC Example Instances:</b> <i>N/A</i>'}]}]}, {'text': 'User interfaces accessed via Web and Mobile Platforms to interact with various system processes and data stores', 'state': {'opened': True}, 'children': [{'text': '<mark>"Cross-site scripting (XSS)"</mark>', 'state': {'opened': False}, 'data': {'likelihood': 'High', 'severity': 'Very High'}, 'children': [{'text': '<b>CAPEC ID:</b> 63'}, {'text': '<b>CAPEC Name:</b> Cross-Site Scripting (XSS)'}, {'text': "<b>CAPEC Description:</b> An adversary embeds malicious scripts in content that will be served to web browsers. The goal of the attack is for the target software, the client-side browser, to execute the script with the users' privilege level. An attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute code and scripts. Web browsers, for example, have some simple security controls in place, but if a remote attacker is allowed to execute scripts (through injecting them in to user-generated content like bulletin boards) then these controls may be bypassed. Further, these attacks are very difficult for an end user to detect."}, {'text': '<b>CAPEC Likelihood Of Attack:</b> High'}, {'text': '<b>CAPEC Typical Severity:</b> Very High'}, {'text': "<b>CAPEC Mitigations:</b> ::Design: Use browser technologies that do not allow client side scripting.::Design: Utilize strict type, character, and encoding enforcement::Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.::Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.::Implementation: Perform input validation for all remote content.::Implementation: Perform output validation for all remote content.::Implementation: Session tokens for specific host::Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.::"}, {'text': "<b>CAPEC Example Instances:</b> ::Classic phishing attacks lure users to click on content that appears trustworthy, such as logos, and links that seem to go to their trusted financial institutions and online auction sites. But instead the attacker appends malicious scripts into the otherwise innocent appearing resources. The HTML source for a standard phishing attack looks like this: <a href=www.exampletrustedsite.com?Name=<script>maliciousscript</script>>Trusted Site</a> When the user clicks the link, the appended script also executes on the local user's machine.::"}]}, {'text': '<mark>"session hijacking"</mark>', 'state': {'opened': False}, 'data': {'likelihood': 'High', 'severity': 'Very High'}, 'children': [{'text': '<b>CAPEC ID:</b> 593'}, {'text': '<b>CAPEC Name:</b> Session Hijacking'}, {'text': "<b>CAPEC Description:</b> This type of attack involves an adversary that exploits weaknesses in an application's use of sessions in performing authentication. The adversary is able to steal or manipulate an active session and use it to gain unathorized access to the application."}, {'text': '<b>CAPEC Likelihood Of Attack:</b> High'}, {'text': '<b>CAPEC Typical Severity:</b> Very High'}, {'text': '<b>CAPEC Mitigations:</b> ::Properly encrypt and sign identity tokens in transit, and use industry standard session key generation mechanisms that utilize high amount of entropy to generate the session key. Many standard web and application servers will perform this task on your behalf. Utilize a session timeout for all sessions. If the user does not explicitly logout, terminate their session after this period of inactivity. If the user logs back in then a new session key should be generated.::'}, {'text': '<b>CAPEC Example Instances:</b> <i>N/A</i>'}]}, {'text': '<mark>"man-in-the-middle attacks"</mark>', 'state': {'opened': False}, 'data': {'likelihood': 'High', 'severity': 'Very High'}, 'children': [{'text': '<b>CAPEC ID:</b> 94'}, {'text': '<b>CAPEC Name:</b> Adversary in the Middle (AiTM)'}, {'text': '<b>CAPEC Description:</b> An adversary targets the communication between two components (typically client and server), in order to alter or obtain data from transactions. A general approach entails the adversary placing themself within the communication channel between the two components.'}, {'text': '<b>CAPEC Likelihood Of Attack:</b> High'}, {'text': '<b>CAPEC Typical Severity:</b> Very High'}, {'text': '<b>CAPEC Mitigations:</b> ::Ensure Public Keys are signed by a Certificate Authority::Encrypt communications using cryptography (e.g., SSL/TLS)::Use Strong mutual authentication to always fully authenticate both ends of any communications channel.::Exchange public keys using a secure channel::'}, {'text': '<b>CAPEC Example Instances:</b> ::In 2017, security researcher Jerry Decime discovered that Equifax mobile applications were not leveraging HTTPS in all areas. Although authentication was properly utilizing HTTPS, in addition to validating the root of trust of the server certificate, other areas of the application were using HTTP to communicate. Adversaries could then conduct MITM attacks on rogue WiFi or cellular networks and hijack the UX. This further allowed the adversaries to prompt users for sensitive data, which could then be obtained in the plaintext response. [REF-636]::'}]}]}]}
]

@app.route("/")
def index():
    return render_template("index.html")

@app.route("/decompose_system", methods=["POST"])
def decompose():
    # system_description = request.data.decode("utf-8")
    # decomposed_system = decompose_system(system_description)
    # return decomposed_system
    return decompose_system_output

@app.route("/identify_threats", methods=["POST"])
def identify():
    # decomposed_system = request.data.decode("utf-8")
    # identified_threats = identify_threats(decomposed_system)
    # return identified_threats
    return identify_threats_output

@app.route("/retrieve_entries", methods=["POST"])
def retrieve():
    # identified_threats = request.data.decode("utf-8")
    # generated_dictionary = generate_dictionary(identified_threats)
    # retrieved_entries = []
    # if len(generated_dictionary) == 0:
    #     retrieved_entries = ["There was an error in retrieving the relevant CAPEC entries."]
    # else:
    #     retrieved_entries = retrieve_entries(generated_dictionary)
    # return retrieved_entries
    return retrieve_entries_output

if __name__ == "__main__":
    app.run(debug=True)