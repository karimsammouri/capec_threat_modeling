ID,Name,Description,Likelihood Of Attack,Typical Severity,Mitigations,Example Instances
78,Using Escaped Slashes in Alternate Encoding,"This attack targets the use of the backslash in alternate encoding. An adversary can provide a backslash as a leading character and causes a parser to believe that the next character is special. This is called an escape. By using that trick, the adversary tries to exploit alternate ways to encode the same character which leads to filter problems and opens avenues to attack.",High,High,"::Verify that the user-supplied data does not use backslash character to escape malicious characters.::Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.::Be aware of the threat of alternative method of data encoding.::Regular expressions can be used to filter out backslash. Make sure you decode before filtering and validating the untrusted input data.::In the case of path traversals, use the principle of least privilege when determining access rights to file systems. Do not allow users to access directories/files that they should not access.::Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.::Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.::","::For example, the byte pair 0 might result in a single zero byte (a NULL) being sent. Another example is t, which is sometimes converted into a tab character. There is often an equivalent encoding between the back slash and the escaped back slash. This means that / results in a single forward slash. A single forward slash also results in a single forward slash. The encoding looks like this: / yields // yields /::An attack leveraging escaped slashes in slternate encodings is very simple. If you believe the target may be filtering the slash, attempt to supply / and see what happens. Example command strings to try out include CWD ../../../../winnt which converts in many cases to CWD ../../../../winnt To probe for this kind of problem, a small C program that uses string output routines can be very useful. File system calls make excellent testing fodder. The simple snippet int main(int argc, char* argv[]){puts(/ ? . | );return 0; } produces the output / ? . | Clearly, the back slash is ignored, and thus we have hit on a number of alternative encodings to experiment with. Given our previous example, we can extend the attack to include other possibilities: CWD ..????/../../../winntCWD ../../../../winntCWD ..||||/../../../winnt::"
