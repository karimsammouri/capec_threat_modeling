ID,Name,Description,Likelihood Of Attack,Typical Severity,Mitigations,Example Instances
132,Symlink Attack,"An adversary positions a symbolic link in such a manner that the targeted user or application accesses the link's endpoint, assuming that it is accessing a file with the link's name.",Low,High,"::Design: Check for the existence of files to be created, if in existence verify they are neither symlinks nor hard links before opening them.::Implementation: Use randomly generated file names for temporary files. Give the files restrictive permissions.::","::The adversary creates a symlink with the same name as the file which the application is intending to write to. The application will write to the file- causing the data to be written where the symlink is pointing. An attack like this can be demonstrated as follows: root# vulprog myFile {...program does some processing...] adversary# ln â€“s /etc/nologin myFile [...program writes to 'myFile', which points to /etc/nologin...] In the above example, the root user ran a program with poorly written file handling routines, providing the filename myFile to vulnprog for the relevant data to be written to. However, the adversary happened to be looking over the shoulder of root at the time, and created a link from myFile to /etc/nologin. The attack would make no user be able to login.::"
